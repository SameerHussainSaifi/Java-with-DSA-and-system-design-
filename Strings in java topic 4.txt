Que.1  WAP ( Write a program) to remove duplicates from a String . ( Take any string example with duplicates character)
(Answer)  Here's a simple Java program to remove duplicate characters from a string:

import java.util.LinkedHashSet;
import java.util.Set;

public class RemoveDuplicates {
    public static void main(String[] args) {
        String input = "programming"; // Example string with duplicates

        String result = removeDuplicates(input);
        System.out.println("Original String: " + input);
        System.out.println("String after removing duplicates: " + result);
    }

    public static String removeDuplicates(String str) {
        // Using LinkedHashSet to maintain the order of characters
        Set<Character> set = new LinkedHashSet<>();

        // Loop through the string and add each character to the set
        for (char c : str.toCharArray()) {
            set.add(c);
        }

        // Build the result string from the characters in the set
        StringBuilder sb = new StringBuilder();
        for (char c : set) {
            sb.append(c);
        }

        return sb.toString();
    }
}

Explanation:
Input String: "programming" (contains duplicate characters like r, g, and m).
LinkedHashSet is used to maintain the order of insertion and automatically handle duplicates.
StringBuilder is used to create the final string from the characters stored in the set.

output:
Original String: programming
String after removing duplicates: progamin

You can replace "programming" with any other string to test the program with different inputs.

Que.2  Write a program to print duplicates character from the string
(Answer)   Here's a Java program to print the duplicate characters from a given string:

import java.util.HashMap;
import java.util.Map;

public class DuplicateCharacters {
    public static void main(String[] args) {
        String input = "programming"; // Example string with duplicates

        printDuplicateCharacters(input);
    }

    public static void printDuplicateCharacters(String str) {
        // Create a HashMap to store the frequency of each character
        Map<Character, Integer> charCountMap = new HashMap<>();

        // Loop through the string and populate the HashMap
        for (char c : str.toCharArray()) {
            if (charCountMap.containsKey(c)) {
                charCountMap.put(c, charCountMap.get(c) + 1);
            } else {
                charCountMap.put(c, 1);
            }
        }

        // Print characters that appear more than once
        System.out.println("Duplicate characters in the string:");
        for (Map.Entry<Character, Integer> entry : charCountMap.entrySet()) {
            if (entry.getValue() > 1) {
                System.out.println(entry.getKey() + " : " + entry.getValue());
            }
        }
    }
}

Explanation:
Input String: "programming" (contains duplicate characters like r, g, and m).
HashMap is used to store the frequency of each character in the string.
The program iterates through the string and updates the count of each character in the HashMap.
Finally, it prints out the characters that appear more than once along with their counts.

output:
Duplicate characters in the string:
r : 2
g : 2
m : 2

You can replace "programming" with any other string to test the program with different inputs.


Que.3   Write a program to check if  "2552" is palindrome or not.
(Answer)   Here's a Java program to check if the string "2552" is a palindrome:

public class PalindromeCheck {
    public static void main(String[] args) {
        String input = "2552"; // Example string

        if (isPalindrome(input)) {
            System.out.println(input + " is a palindrome.");
        } else {
            System.out.println(input + " is not a palindrome.");
        }
    }

    public static boolean isPalindrome(String str) {
        int left = 0;
        int right = str.length() - 1;

        // Compare characters from the beginning and end of the string
        while (left < right) {
            if (str.charAt(left) != str.charAt(right)) {
                return false; // Not a palindrome if characters don't match
            }
            left++;
            right--;
        }

        return true; // Palindrome if all characters match
    }
}


Here's a Java program to check if the string "2552" is a palindrome:

java
Copy code
public class PalindromeCheck {
    public static void main(String[] args) {
        String input = "2552"; // Example string

        if (isPalindrome(input)) {
            System.out.println(input + " is a palindrome.");
        } else {
            System.out.println(input + " is not a palindrome.");
        }
    }

    public static boolean isPalindrome(String str) {
        int left = 0;
        int right = str.length() - 1;

        // Compare characters from the beginning and end of the string
        while (left < right) {
            if (str.charAt(left) != str.charAt(right)) {
                return false; // Not a palindrome if characters don't match
            }
            left++;
            right--;
        }

        return true; // Palindrome if all characters match
    }
}
Explanation:
Input String: "2552"
The program checks if the string reads the same forward and backward.
It uses two pointers, one starting from the left (left) and one from the right (right), to compare characters.
If all characters match as the pointers move towards the center, the string is a palindrome.

output:
2552 is a palindrome.


Que.4   Write a program to count the number of consonants, vowels, special characters in a string.
(Answer)   Here's a Java program to count the number of consonants, vowels, and special characters in a given string:

public class StringCharacterCount {
    public static void main(String[] args) {
        String input = "Hello, World! 2024"; // Example string

        int vowelsCount = 0;
        int consonantsCount = 0;
        int specialCharCount = 0;

        // Convert the string to lowercase to simplify comparison
        String lowerCaseInput = input.toLowerCase();

        // Loop through each character in the string
        for (int i = 0; i < lowerCaseInput.length(); i++) {
            char ch = lowerCaseInput.charAt(i);

            // Check if the character is a vowel
            if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {
                vowelsCount++;
            }
            // Check if the character is a consonant (an alphabetic character that is not a vowel)
            else if (ch >= 'a' && ch <= 'z') {
                consonantsCount++;
            }
            // Check if the character is a special character
            else if (!Character.isDigit(ch) && !Character.isWhitespace(ch)) {
                specialCharCount++;
            }
        }

        // Print the counts
        System.out.println("Number of vowels: " + vowelsCount);
        System.out.println("Number of consonants: " + consonantsCount);
        System.out.println("Number of special characters: " + specialCharCount);
    }
}


Explanation:
Input String: "Hello, World! 2024" (contains vowels, consonants, digits, and special characters).
The program converts the string to lowercase for easier comparison.
It loops through each character in the string, checking if it's a vowel, consonant, or special character:
Vowels are 'a', 'e', 'i', 'o', 'u'.
Consonants are any alphabetic characters that are not vowels.
Special Characters are any characters that are neither digits, alphabetic characters, nor whitespaces.
Finally, it prints the counts of vowels, consonants, and special characters.

output:
Number of vowels: 3
Number of consonants: 7
Number of special characters: 3

Que.5   Write a program to implement Anagram checking least inbuilt methods being used.
(Answer)    Hereâ€™s a Java program to check if two strings are anagrams with minimal use of inbuilt methods:

public class AnagramCheck {
    public static void main(String[] args) {
        String str1 = "listen";  // First string
        String str2 = "silent";  // Second string

        if (areAnagrams(str1, str2)) {
            System.out.println(str1 + " and " + str2 + " are anagrams.");
        } else {
            System.out.println(str1 + " and " + str2 + " are not anagrams.");
        }
    }

    public static boolean areAnagrams(String str1, String str2) {
        // Check if lengths of the strings are the same
        if (str1.length() != str2.length()) {
            return false;
        }

        // Create an array to store the frequency of characters
        int[] charCount = new int[26]; // Only for lowercase letters a-z

        // Count frequency of each character in str1
        for (int i = 0; i < str1.length(); i++) {
            charCount[str1.charAt(i) - 'a']++;
        }

        // Subtract the frequency based on str2
        for (int i = 0; i < str2.length(); i++) {
            charCount[str2.charAt(i) - 'a']--;
        }

        // If all counts are zero, then the strings are anagrams
        for (int i = 0; i < 26; i++) {
            if (charCount[i] != 0) {
                return false;  // Not anagrams if any frequency is non-zero
            }
        }

        return true;  // Anagrams if all counts are zero
    }
}

Explanation:
Input Strings: "listen" and "silent".
The program checks if two strings are anagrams by using a single array to track the frequency of characters:
It first increments the count for each character in the first string.
Then, it decrements the count for each character in the second string.
If all counts are zero after processing both strings, the strings are anagrams.
If the strings have different lengths, they cannot be anagrams.

output:
listen and silent are anagrams.


Que.6   Write a program to implement pangram checking with least inbuilt methods being used.
(Answer)   Here's a Java program to check if a given string is a pangram with minimal use of inbuilt methods:


public class PangramCheck {
    public static void main(String[] args) {
        String sentence = "The quick brown fox jumps over a lazy dog"; // Example string

        if (isPangram(sentence)) {
            System.out.println("The sentence is a pangram.");
        } else {
            System.out.println("The sentence is not a pangram.");
        }
    }

    public static boolean isPangram(String sentence) {
        // Create an array to track the occurrence of each letter
        boolean[] letterPresent = new boolean[26];

        // Convert the sentence to lowercase
        sentence = sentence.toLowerCase();

        // Loop through each character in the string
        for (int i = 0; i < sentence.length(); i++) {
            char ch = sentence.charAt(i);

            // Check if the character is a letter (between 'a' and 'z')
            if (ch >= 'a' && ch <= 'z') {
                // Mark the letter as present
                letterPresent[ch - 'a'] = true;
            }
        }

        // Check if

Explanation:
Input String: "The quick brown fox jumps over a lazy dog".
The program checks if the input string is a pangram by ensuring that each letter of the alphabet (a-z) appears at least once in the string.
It uses a boolean array letterPresent of size 26 to track the occurrence of each letter.
Each index in the array corresponds to a letter (0 for a, 1 for b, etc.).
The program iterates over the string, converting it to lowercase and marking the corresponding array index as true when a letter is encountered.
Finally, it checks if all entries in the letterPresent array are true. If they are, the string is a pangram.

output:

The sentence is a pangram.


Que.7   Write a program to find if string contains all unique characters.
(Answer)   Here's a Java program to check if a string contains all unique characters:
public class UniqueCharacters {
    public static void main(String[] args) {
        String input = "abcdefg"; // Example string

        if (hasAllUniqueCharacters(input)) {
            System.out.println("The string \"" + input + "\" has all unique characters.");
        } else {
            System.out.println("The string \"" + input + "\" does not have all unique characters.");
        }
    }

    public static boolean hasAllUniqueCharacters(String str) {
        // Assuming the string only contains ASCII characters (128 unique characters)
        if (str.length() > 128) {
            return false; // If string length is more than 128, it must have duplicates
        }

        // Create a boolean array to track characters that have been seen
        boolean[] charSet = new boolean[128];

        // Loop through the string
        for (int i = 0; i < str.length(); i++) {
            int val = str.charAt(i);

            // If the character has already been seen, return false
            if (charSet[val]) {
                return false;
            }

            // Mark this character as seen
            charSet[val] = true;
        }

        // If no duplicates are found, return true
        return true;
    }
}


Here's a Java program to check if a string contains all unique characters:

java
Copy code
public class UniqueCharacters {
    public static void main(String[] args) {
        String input = "abcdefg"; // Example string

        if (hasAllUniqueCharacters(input)) {
            System.out.println("The string \"" + input + "\" has all unique characters.");
        } else {
            System.out.println("The string \"" + input + "\" does not have all unique characters.");
        }
    }

    public static boolean hasAllUniqueCharacters(String str) {
        // Assuming the string only contains ASCII characters (128 unique characters)
        if (str.length() > 128) {
            return false; // If string length is more than 128, it must have duplicates
        }

        // Create a boolean array to track characters that have been seen
        boolean[] charSet = new boolean[128];

        // Loop through the string
        for (int i = 0; i < str.length(); i++) {
            int val = str.charAt(i);

            // If the character has already been seen, return false
            if (charSet[val]) {
                return false;
            }

            // Mark this character as seen
            charSet[val] = true;
        }

        // If no duplicates are found, return true
        return true;
    }
}
Explanation:
Input String: "abcdefg" (you can test with different strings).
The program checks if the input string contains all unique characters by using a boolean array charSet of size 128 (to accommodate all ASCII characters).
Each index in charSet corresponds to a character's ASCII value.
As the string is processed, if a character has already been seen (indicated by charSet[val] being true), the function immediately returns false.
If no duplicates are found, the function returns true, indicating all characters are unique.

output:
The string "abcdefg" has all unique characters.


Que.8   Write a program to find the maximum occurring character in a string.
(Answer)   Hereâ€™s a Java program to find the maximum occurring character in a string:
public class MaxOccurringCharacter {
    public static void main(String[] args) {
        String input = "example string"; // Example string

        char maxChar = findMaxOccurringCharacter(input);
        System.out.println("The maximum occurring character is: " + maxChar);
    }

    public static char findMaxOccurringCharacter(String str) {
        // Create an array to count occurrences of each character
        int[] charCount = new int[256]; // Assuming ASCII characters

        // Convert the string to lowercase to make it case-insensitive
        str = str.toLowerCase();

        // Count the frequency of each character in the string
        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);

            // Increment the count only if the character is a letter or a digit
            if (Character.isLetterOrDigit(ch)) {
                charCount[ch]++;
            }
        }

        // Find the character with the maximum frequency
        char maxChar = '\0';
        int maxCount = 0;
        for (int i = 0; i < 256; i++) {
            if (charCount[i] > maxCount) {
                maxCount = charCount[i];
                maxChar = (char) i;
            }
        }

        return maxChar;
    }
}


Hereâ€™s a Java program to find the maximum occurring character in a string:

java
Copy code
public class MaxOccurringCharacter {
    public static void main(String[] args) {
        String input = "example string"; // Example string

        char maxChar = findMaxOccurringCharacter(input);
        System.out.println("The maximum occurring character is: " + maxChar);
    }

    public static char findMaxOccurringCharacter(String str) {
        // Create an array to count occurrences of each character
        int[] charCount = new int[256]; // Assuming ASCII characters

        // Convert the string to lowercase to make it case-insensitive
        str = str.toLowerCase();

        // Count the frequency of each character in the string
        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);

            // Increment the count only if the character is a letter or a digit
            if (Character.isLetterOrDigit(ch)) {
                charCount[ch]++;
            }
        }

        // Find the character with the maximum frequency
        char maxChar = '\0';
        int maxCount = 0;
        for (int i = 0; i < 256; i++) {
            if (charCount[i] > maxCount) {
                maxCount = charCount[i];
                maxChar = (char) i;
            }
        }

        return maxChar;
    }
}
Explanation:
Input String: "example string" (you can replace it with any other string).
The program uses an array charCount of size 256 to keep track of the frequency of each character (assuming ASCII characters).
It iterates through the string and increments the count of each character in the charCount array.
Only letters and digits are counted; other characters are ignored.
After counting, it finds the character with the maximum frequency by iterating through the charCount array and keeping track of the highest count.

output:
The maximum occurring character is: e
















