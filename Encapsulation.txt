Que.1   What is Encapsulation in Java? Why it is called data hiding?
(Answer)   Encapsulation is that process which binding data members and members functions in a single unit , it is known as  Encapsulation.

And it also known as data hiding because by the implementation of Encapsulation  in our program we hide out essential data from the out of that class because we hide them with private keyword.

Que. 2   What are the important features of Encapsulation?
(Answer)   These are the important features of Encapsulation:-

Data Hiding: it is a way of restricting the access of our data members by hiding the implementation details. Encapsulation also provides a way for data hiding. The user will have no idea about the inner implementation of the class. It will not be visible to the user how the class is storing values in the variables. The user will only know that we are passing the values to a setter method and variables are getting initialized with that value.

Increased Flexibility: We can make the variables of the class read-only or write-only depending on our requirements. If we wish to make the variables read-only then we have to omit the setter methods like setName(), setAge(), etc. from the above program or if we wish to make the variables write-only then we have to omit the get methods like getName(), getAge(), etc. from the above program

Reusability: Encapsulation also improves the re-usability and is easy to change with new requirements.

Testing code is easy: Encapsulated code is easy to test for unit testing.

Freedom to programmer in implementing the details of the system: This is one of the major advantage of encapsulation that it gives the programmer freedom in implementing the details of a system. The only constraint on the programmer is to maintain the abstract interface that outsiders see.  


Que.3   What are getter and setter methods in java ? Explain with an exaple.
(Answer)   In Java, Getter and Setter are methods used to protect your data and make your code more secure. Getter and Setter make the programmer convenient in setting and getting the value for a particular data type.

Getter in Java: Getter returns the value (accessors), it returns the value of data type int, String, double, float, etc. For the program’s convenience, the getter starts with the word “get” followed by the variable name.

Setter in Java: While Setter sets or updates the value (mutators). It sets the value for any variable used in a class’s programs. and starts with the word “set” followed by the variable name. 

Syntax
class ABC{
    private variable;
    
    public void setVariable(int x){
        this.variable=x;
    }
    
    public int getVariable{
        return variable;
    }
}
Note: In both getter and setter, the first letter of the variable should be capital.

Example:-

// Java Program to Illustrate Getter and Setter
 
// Importing input output classes
import java.io.*;
 
// Class 1
// Helper class
class GetSet {
 
    // Member variable of this class
    private String name;
 
    // Method 1 - Getter
    public String getName() { return name; }
 
    // Method 2 - Setter
    public void setName(String N)
    {
 
        // This keyword refers to current instance itself
        this.name = N;
    }
}
 
// Class 2
// Main class
class GFG {
 
    // Main driver method
    public static void main(String[] args)
    {
        // Creating an object of class 1 in main() method
        GetSet obj = new GetSet();
 
        // Setting the name by calling setter method
        obj.setName("Geeks for Geeks");
        // Getting the name by calling getter method
        System.out.println(obj.getName());
    }
}
Output:- 
Geeks for Geeks

Que.4   What is the use of this keyword in Java explain with an example:- 
(Answer)   There can be a lot of usage of Java this keyword. In Java, this is a reference variable that refers to the current object.

Usage of Java this keyword:-

Here is given the 6 usage of java this keyword.

this can be used to refer current class instance variable.
this can be used to invoke current class method (implicitly)
this() can be used to invoke current class constructor.
this can be passed as an argument in the method call.
this can be passed as argument in the constructor call.
this can be used to return the current class instance from the method.

Example:-
class Student{  
int rollno;  
String name;  
float fee;  
Student(int rollno,String name,float fee){  
this.rollno=rollno;  
this.name=name;  
this.fee=fee;  
}  
void display(){System.out.println(rollno+" "+name+" "+fee);}  
}  
  
class TestThis2{  
public static void main(String args[]){  
Student s1=new Student(111,"ankit",5000f);  
Student s2=new Student(112,"sumit",6000f);  
s1.display();  
s2.display();  
}}  
Test it Now
Output:

111 ankit 5000.0
112 sumit 6000.0

Que.5   What is the advantage of Encapsulation?
(Answer)   These are the advantages of Encapsulation:-

Data Protection: The program runner will not be able to identify or see which methods are present in the code. Therefore he/she doesn’t get any chance to change any specific variable or data and hinder the running of the program.

Flexibility: The code which is encapsulated looks more cleaner and flexible, and can be changed as per the needs. We can change the code read-only or write-only by getter and setter methods. This also helps in debugging the code if needed.

Reusability: The methods can be changed and the code is reusable.

Que.6  How to achieve encapsulation in java ? Give an example.
(Answer)   In Java, encapsulation is achieved by declaring the instance variables of a class as private, which means they can only be accessed within the class. To allow outside access to the instance variables, public methods called getters and setters are defined, which are used to retrieve and modify the values of the instance variables, respectively. By using getters and setters, the class can enforce its own data validation rules and ensure that its internal state remains consistent.

Example:-
// Java Program to demonstrate
// Java Encapsulation
 
// Person Class
class Person {
    // Encapsulating the name and age
    // only approachable and used using
    // methods defined
    private String name;
    private int age;
 
    public String getName() { return name; }
 
    public void setName(String name) { this.name = name; }
 
    public int getAge() { return age; }
 
    public void setAge(int age) { this.age = age; }
}
 
// Driver Class
public class Main {
    // main function
    public static void main(String[] args)
    {
        // person object created
        Person person = new Person();
        person.setName("John");
        person.setAge(30);
 
        // Using methods to get the values from the
        // variables
        System.out.println("Name: " + person.getName());
        System.out.println("Age: " + person.getAge());
    }
}
Output
Name: John
Age: 30
